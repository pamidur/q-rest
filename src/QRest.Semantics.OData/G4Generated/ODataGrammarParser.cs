//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ODataGrammar.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ODataGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, EQPARAM=9, 
		DOLLAR=10, AMPERSAND=11, COMMA=12, SQ=13, AND=14, OR=15, NOT=16, TRUE=17, 
		FALSE=18, GT=19, GE=20, LT=21, LE=22, EQ=23, NE=24, LPAREN=25, RPAREN=26, 
		DECIMAL=27, INT=28, IDENTIFIER=29, STRINGLITERAL=30, WS=31;
	public const int
		RULE_parse = 0, RULE_queryOptions = 1, RULE_queryOption = 2, RULE_filter = 3, 
		RULE_select = 4, RULE_selectItem = 5, RULE_count = 6, RULE_orderby = 7, 
		RULE_orderbyItem = 8, RULE_order = 9, RULE_top = 10, RULE_skip = 11, RULE_expression = 12, 
		RULE_comparator = 13, RULE_binary = 14, RULE_bool = 15, RULE_functionParams = 16;
	public static readonly string[] ruleNames = {
		"parse", "queryOptions", "queryOption", "filter", "select", "selectItem", 
		"count", "orderby", "orderbyItem", "order", "top", "skip", "expression", 
		"comparator", "binary", "bool", "functionParams"
	};

	private static readonly string[] _LiteralNames = {
		null, "'filter'", "'select'", "'count'", "'orderby'", "'asc'", "'desc'", 
		"'top'", "'skip'", "'='", "'$'", "'&'", "','", null, null, null, null, 
		null, null, null, null, null, null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "EQPARAM", "DOLLAR", 
		"AMPERSAND", "COMMA", "SQ", "AND", "OR", "NOT", "TRUE", "FALSE", "GT", 
		"GE", "LT", "LE", "EQ", "NE", "LPAREN", "RPAREN", "DECIMAL", "INT", "IDENTIFIER", 
		"STRINGLITERAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ODataGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ODataGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ODataGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ODataGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ParseContext : ParserRuleContext {
		public QueryOptionsContext queryOptions() {
			return GetRuleContext<QueryOptionsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ODataGrammarParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; queryOptions();
			State = 35; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryOptionsContext : ParserRuleContext {
		public QueryOptionContext[] queryOption() {
			return GetRuleContexts<QueryOptionContext>();
		}
		public QueryOptionContext queryOption(int i) {
			return GetRuleContext<QueryOptionContext>(i);
		}
		public ITerminalNode[] AMPERSAND() { return GetTokens(ODataGrammarParser.AMPERSAND); }
		public ITerminalNode AMPERSAND(int i) {
			return GetToken(ODataGrammarParser.AMPERSAND, i);
		}
		public QueryOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryOptions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryOptionsContext queryOptions() {
		QueryOptionsContext _localctx = new QueryOptionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_queryOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; queryOption();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 38; Match(AMPERSAND);
				State = 39; queryOption();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryOptionContext : ParserRuleContext {
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public CountContext count() {
			return GetRuleContext<CountContext>(0);
		}
		public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		public QueryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryOption; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryOptionContext queryOption() {
		QueryOptionContext _localctx = new QueryOptionContext(Context, State);
		EnterRule(_localctx, 4, RULE_queryOption);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; filter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; select();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 47; count();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 48; orderby();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 49; top();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 50; skip();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ExpressionContext filterexpr;
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 6, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(DOLLAR);
			State = 54; Match(T__0);
			State = 55; Match(EQPARAM);
			State = 56; _localctx.filterexpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ODataGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ODataGrammarParser.COMMA, i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 8, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(DOLLAR);
			State = 59; Match(T__1);
			State = 60; Match(EQPARAM);
			State = 61; selectItem();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 62; Match(COMMA);
				State = 63; selectItem();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ODataGrammarParser.IDENTIFIER, 0); }
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountContext : ParserRuleContext {
		public BoolContext decexpr;
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public CountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_count; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountContext count() {
		CountContext _localctx = new CountContext(Context, State);
		EnterRule(_localctx, 12, RULE_count);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(DOLLAR);
			State = 72; Match(T__2);
			State = 73; Match(EQPARAM);
			State = 74; _localctx.decexpr = @bool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public OrderbyItemContext[] orderbyItem() {
			return GetRuleContexts<OrderbyItemContext>();
		}
		public OrderbyItemContext orderbyItem(int i) {
			return GetRuleContext<OrderbyItemContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(ODataGrammarParser.COMMA, 0); }
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 14, RULE_orderby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(DOLLAR);
			State = 77; Match(T__3);
			State = 78; Match(EQPARAM);
			State = 79; orderbyItem();
			{
			State = 80; Match(COMMA);
			State = 81; orderbyItem();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyItemContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ODataGrammarParser.IDENTIFIER, 0); }
		public OrderContext order() {
			return GetRuleContext<OrderContext>(0);
		}
		public OrderbyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderbyItem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderbyItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyItemContext orderbyItem() {
		OrderbyItemContext _localctx = new OrderbyItemContext(Context, State);
		EnterRule(_localctx, 16, RULE_orderbyItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(IDENTIFIER);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==T__5) {
				{
				State = 84; order();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderContext : ParserRuleContext {
		public OrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderContext order() {
		OrderContext _localctx = new OrderContext(Context, State);
		EnterRule(_localctx, 18, RULE_order);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public ITerminalNode INT() { return GetToken(ODataGrammarParser.INT, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 20, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(DOLLAR);
			State = 90; Match(T__6);
			State = 91; Match(EQPARAM);
			State = 92; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(ODataGrammarParser.DOLLAR, 0); }
		public ITerminalNode EQPARAM() { return GetToken(ODataGrammarParser.EQPARAM, 0); }
		public ITerminalNode INT() { return GetToken(ODataGrammarParser.INT, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 22, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(DOLLAR);
			State = 95; Match(T__7);
			State = 96; Match(EQPARAM);
			State = 97; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BinaryContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalExpressionContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(ODataGrammarParser.DECIMAL, 0); }
		public DecimalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(ODataGrammarParser.STRINGLITERAL, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpressionContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(ODataGrammarParser.INT, 0); }
		public IntExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ODataGrammarParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode NOT() { return GetToken(ODataGrammarParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(ODataGrammarParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ODataGrammarParser.RPAREN, 0); }
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparatorExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ComparatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparatorContext comparator() {
			return GetRuleContext<ComparatorContext>(0);
		}
		public ComparatorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparatorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExpressionContext : ExpressionContext {
		public IToken func;
		public ITerminalNode LPAREN() { return GetToken(ODataGrammarParser.LPAREN, 0); }
		public FunctionParamsContext functionParams() {
			return GetRuleContext<FunctionParamsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ODataGrammarParser.RPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ODataGrammarParser.IDENTIFIER, 0); }
		public FuncCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 100; Match(LPAREN);
				State = 101; expression(0);
				State = 102; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(NOT);
				State = 105; expression(9);
				}
				break;
			case 3:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; @bool();
				}
				break;
			case 4:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107; Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new DecimalExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; Match(DECIMAL);
				}
				break;
			case 6:
				{
				_localctx = new IntExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; Match(INT);
				}
				break;
			case 7:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110; Match(STRINGLITERAL);
				}
				break;
			case 8:
				{
				_localctx = new FuncCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111; ((FuncCallExpressionContext)_localctx).func = Match(IDENTIFIER);
				State = 112; Match(LPAREN);
				State = 113; functionParams();
				State = 114; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ComparatorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparatorExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 119; ((ComparatorExpressionContext)_localctx).op = comparator();
						State = 120; ((ComparatorExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 122;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 123; ((BinaryExpressionContext)_localctx).op = binary();
						State = 124; ((BinaryExpressionContext)_localctx).right = expression(8);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(ODataGrammarParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(ODataGrammarParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(ODataGrammarParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(ODataGrammarParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(ODataGrammarParser.EQ, 0); }
		public ComparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparatorContext comparator() {
		ComparatorContext _localctx = new ComparatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(ODataGrammarParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(ODataGrammarParser.OR, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 28, RULE_binary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(ODataGrammarParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ODataGrammarParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ODataGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ODataGrammarParser.COMMA, i);
		}
		public FunctionParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IODataGrammarVisitor<TResult> typedVisitor = visitor as IODataGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamsContext functionParams() {
		FunctionParamsContext _localctx = new FunctionParamsContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; expression(0);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 138; Match(COMMA);
				State = 139; expression(0);
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\x94', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'+', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '.', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x43', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x46', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'X', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'w', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x81', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x84', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x8F', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\x92', '\v', '\x12', '\x3', '\x12', 
		'\x2', '\x3', '\x1A', '\x13', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'\x2', '\x6', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\x15', '\x19', 
		'\x3', '\x2', '\x10', '\x11', '\x3', '\x2', '\x13', '\x14', '\x2', '\x94', 
		'\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x35', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x12', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x14', 'Y', '\x3', '\x2', '\x2', '\x2', '\x16', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '`', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x87', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x89', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', 
		'%', '&', '\a', '\x2', '\x2', '\x3', '&', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\'', ',', '\x5', '\x6', '\x4', '\x2', '(', ')', '\a', '\r', '\x2', 
		'\x2', ')', '+', '\x5', '\x6', '\x4', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x36', '\x5', 
		'\b', '\x5', '\x2', '\x30', '\x36', '\x5', '\n', '\x6', '\x2', '\x31', 
		'\x36', '\x5', '\xE', '\b', '\x2', '\x32', '\x36', '\x5', '\x10', '\t', 
		'\x2', '\x33', '\x36', '\x5', '\x16', '\f', '\x2', '\x34', '\x36', '\x5', 
		'\x18', '\r', '\x2', '\x35', '/', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\f', '\x2', '\x2', 
		'\x38', '\x39', '\a', '\x3', '\x2', '\x2', '\x39', ':', '\a', '\v', '\x2', 
		'\x2', ':', ';', '\x5', '\x1A', '\xE', '\x2', ';', '\t', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\a', '\f', '\x2', '\x2', '=', '>', '\a', '\x4', 
		'\x2', '\x2', '>', '?', '\a', '\v', '\x2', '\x2', '?', '\x44', '\x5', 
		'\f', '\a', '\x2', '@', '\x41', '\a', '\xE', '\x2', '\x2', '\x41', '\x43', 
		'\x5', '\f', '\a', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'H', '\a', '\x1F', '\x2', '\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\f', '\x2', '\x2', 'J', 'K', '\a', '\x5', '\x2', '\x2', 
		'K', 'L', '\a', '\v', '\x2', '\x2', 'L', 'M', '\x5', ' ', '\x11', '\x2', 
		'M', '\xF', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\f', '\x2', '\x2', 
		'O', 'P', '\a', '\x6', '\x2', '\x2', 'P', 'Q', '\a', '\v', '\x2', '\x2', 
		'Q', 'R', '\x5', '\x12', '\n', '\x2', 'R', 'S', '\a', '\xE', '\x2', '\x2', 
		'S', 'T', '\x5', '\x12', '\n', '\x2', 'T', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'W', '\a', '\x1F', '\x2', '\x2', 'V', 'X', '\x5', '\x14', 
		'\v', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x13', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\t', 
		'\x2', '\x2', '\x2', 'Z', '\x15', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\a', '\f', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', ']', '^', 
		'\a', '\v', '\x2', '\x2', '^', '_', '\a', '\x1E', '\x2', '\x2', '_', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\f', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\n', '\x2', '\x2', '\x62', '\x63', '\a', '\v', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\x1E', '\x2', '\x2', '\x64', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\b', '\xE', '\x1', '\x2', '\x66', 'g', 
		'\a', '\x1B', '\x2', '\x2', 'g', 'h', '\x5', '\x1A', '\xE', '\x2', 'h', 
		'i', '\a', '\x1C', '\x2', '\x2', 'i', 'w', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x12', '\x2', '\x2', 'k', 'w', '\x5', '\x1A', '\xE', 
		'\v', 'l', 'w', '\x5', ' ', '\x11', '\x2', 'm', 'w', '\a', '\x1F', '\x2', 
		'\x2', 'n', 'w', '\a', '\x1D', '\x2', '\x2', 'o', 'w', '\a', '\x1E', '\x2', 
		'\x2', 'p', 'w', '\a', ' ', '\x2', '\x2', 'q', 'r', '\a', '\x1F', '\x2', 
		'\x2', 'r', 's', '\a', '\x1B', '\x2', '\x2', 's', 't', '\x5', '\"', '\x12', 
		'\x2', 't', 'u', '\a', '\x1C', '\x2', '\x2', 'u', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\x65', '\x3', '\x2', '\x2', '\x2', 'v', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'l', '\x3', '\x2', '\x2', '\x2', 'v', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'n', '\x3', '\x2', '\x2', '\x2', 'v', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'p', '\x3', '\x2', '\x2', '\x2', 'v', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x82', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\f', 
		'\n', '\x2', '\x2', 'y', 'z', '\x5', '\x1C', '\xF', '\x2', 'z', '{', '\x5', 
		'\x1A', '\xE', '\v', '{', '\x81', '\x3', '\x2', '\x2', '\x2', '|', '}', 
		'\f', '\t', '\x2', '\x2', '}', '~', '\x5', '\x1E', '\x10', '\x2', '~', 
		'\x7F', '\x5', '\x1A', '\xE', '\n', '\x7F', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x80', 'x', '\x3', '\x2', '\x2', '\x2', '\x80', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\t', '\x3', '\x2', '\x2', '\x86', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\t', '\x4', '\x2', '\x2', 
		'\x88', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\t', '\x5', 
		'\x2', '\x2', '\x8A', '!', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x90', 
		'\x5', '\x1A', '\xE', '\x2', '\x8C', '\x8D', '\a', '\xE', '\x2', '\x2', 
		'\x8D', '\x8F', '\x5', '\x1A', '\xE', '\x2', '\x8E', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '#', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\n', ',', '\x35', '\x44', 'W', 'v', '\x80', '\x82', '\x90',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
